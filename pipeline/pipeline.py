#!/usr/bin/env python3
"""Program to process monitoring data from the Edge Servers generated by PortKey
shipped via. Kafka by filebeats. This incoming data at the source ideally should
be compatible with monitoring solutions in a timeseries format.
This program is an event loop which helps us daemonize the application as a long
running process."""

from multiprocessing import Process
import sys
import time

from daemon import DaemonContext as Daemon

from kafka_queues import consumer
from kafka_queues import producer
from transformer import data_processing


class MonitoringPipeline(Daemon):
    '''Class to fetch logging (portkey) data from Kafka, transform it and push
    it back to Kafka Queue.'''

    def __enter__(sbox):
        '''Daemonize this service.'''
        try:
            main()
        except Exception as e:
            print("Exception @Main", e)
        time.sleep(1)

def pipeline():
    '''Monitoring Data processing pipeline:
      - Fetch Data from Kafka.
      - Process & transform the data.
      - Publish the data back to Kafka.
    '''

    # Fetch Portkey generated data from Kafka.
    messages = consumer.consume_topics()
    transformer = data_processing.DataProcessing(messages)
    transformed_messages = transformer.transform()
    # Publish Portkey transformed data back to Kafka.
    producer.publish_data(transformed_messages)

def main():
    '''Main program to manage multiprocessing.'''

    # The sleep() function are critical other the processor usage may
    # uncontrollably spike.
    time.sleep(1)
    proc = Process(target=pipeline())
    proc.start()
    time.sleep(1)
    proc.join()
    time.sleep(5)


if __name__ == "__main__":
    while True:
        try:
            main()
        except Exception as e:
            print("Exception @Main", e)

    """
    logfile = open('/tmp/monitoring-pipline.log', 'w')
    daemon = MonitoringPipeline(pidfile='/tmp/monitoring-pipeline.pid',
            stdout=logfile, stderr=logfile)
    if len(sys.argv) == 2:
        if 'start' == sys.argv[1]:
            daemon.open()
        elif 'stop' == sys.argv[1]:
            daemon.terminate()
        elif 'restart' == sys.argv[1]:
            daemon.terminate()
            daemon.open()
        else:
            print("usage: %s start|stop|restart" % sys.argv[0])

    logfile.close()
    """
