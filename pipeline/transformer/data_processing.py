'''Python program to process & transform data coming in from Edge Devices, generated by
PortKey.

    - Incoming data is not compliant with modern monitoring data paradigms.
    - Transforming the data into various mathematical metrics for easy visualization
      of data in dashboards like Grafana.
    - Data pruning & binning for collective metrics to be able to run various functions
      like mean, average etc., from the end of monitoring dashboards.
'''

from datetime import datetime
import json
import time
import re


class DataProcessing():
    '''Responsible to take the incoming data generated by Portkey and transforming it
    to be able to visualize the data points and various events in modern monitoring
    tools/pipelines/dashboards like Grafana, Kibana etc.
    '''

    def __init__(sbox, messages):
        '''Fetch Portkey data.'''

        sbox.messages = messages

    def transform(sbox):
        '''Transforms data into required formats.'''

        transformed_messages = []
        portkey_dict = {}
        import pprint
        pp = pprint.pprint

        for message in sbox.messages:
            try:
                portkey_dict['data_science_string'] = message[:message.find('{')]
                message = message[message.find('{'):]
                portkey_dict.update(sbox.from_json(message))
                portkey_dict = sbox._transform(portkey_dict)
                transformed_messages.append(sbox.to_json(portkey_dict))
            except ValueError as e:
                pp("Value Error ... missed this json line")
                pp(e)
            except TypeError as e:
                pp("Type Error ... missed this json line")
                pp(e)
            except IndexError as e:
                pp("Index Error ... missed this json line")
                pp(e)
            except KeyError as e:
                pp("KeyError ... missed this json line")
                pp(e)
            finally:
                print('\n=' * 25, '+' * 25, '=' * 25)
                pp(message)
                print('-' * 75, '\n')

        return transformed_messages

    def _transform(sbox, portkey_dict):
        '''Helper function to do the actual transformation
        of PortKey Data into another format.'''

        transformed_portkey_dict = {}

        # Nested helper function for the helper function ...
        # diam, it's getting crazy!
        def _populate(newkey, oldkey):
            '''Populate values into new dict.'''

            transformed_portkey_dict[newkey] = \
                    portkey_dict.pop(oldkey)

        def _get_size(string):
            '''Helper function to get size MB/GiB/GB/KB.'''

            if "GiB" in string:
                return 'GiB'
            elif "GB" in string:
                return 'GB'
            elif "MB" in string:
                return 'MB'
            elif 'KB' in string:
                return 'KB'

        #Convert values of ram details keys to float
        for i in ["ramAvailable","ramUsed","ramTotal"]:
            value = portkey_dict[i]
            portkey_dict[i] = float(value.replace(_get_size(value),"").strip())

        #Convert apIcoming and apOutgoing to float
        for i in ["apIncoming","apOutgoing"]:
            value = portkey_dict[i]
            portkey_dict[i] = float(value.replace(_get_size(value),"").strip())

        # Convert apIncoming & apOutgoing to floating point values
        # TODO(pranav): Fix format for varying *B's!
        _populate('apIncoming (MB)', 'apIncoming')
        _populate('apOutgoing (MB)', 'apOutgoing')
        _populate('ramAvailable (GB)', 'ramAvailable')
        _populate('ramUsed (GB)', 'ramUsed')
        _populate('ramTotal (GB)', 'ramTotal')

        # Convert values of inode key to float
        for j in range(len(portkey_dict["inodes"])):
            for i in ['total','available','used','used%']:
                inodes = portkey_dict['inodes'][j][i]
                if "M" in inodes:
                    sign = 'M'
                elif "K" in inodes:
                    sign = 'K'
                elif "%" in inodes:
                    sign = '%'
                else:
                    if len(inodes) > 1:
                        sign = inodes[-1]
                    else:
                        inodes = '0'
                        sign = ''

                portkey_dict['inodes'][j][i] = float(inodes.replace(sign, ""))

            #Renaming dictionary keys
            portkey_dict["inodes"][j]["total (MB)"] = \
                    portkey_dict["inodes"][j].pop("total")
            portkey_dict["inodes"][j]["used (MB)"] = \
                    portkey_dict["inodes"][j].pop("used")
            portkey_dict["inodes"][j]["available (MB)"] = \
                    portkey_dict["inodes"][j].pop("available")
            portkey_dict["inodes"][j]["used (%)"] = \
                    portkey_dict["inodes"][j].pop("used%")
            portkey_dict["inodes"][j]['path'] = \
                    portkey_dict["inodes"][j]['mountedOn']

        # Convert created time & updated time to UTF format
        for i in range (len(portkey_dict['lastKnownClsSyncTime'])):
            createdTime = portkey_dict["lastKnownClsSyncTime"][i]["createdTime"]
            pattern = '%Y-%m-%d %H:%M:%S'
            createdTime = datetime.strptime(createdTime, pattern)
            portkey_dict["lastKnownClsSyncTime"][i]["createdTime"] = \
                    createdTime.isoformat()

            updatedTime = portkey_dict["lastKnownClsSyncTime"][i]["updatedTime"]
            updatedTime = datetime.strptime(updatedTime, pattern)
            portkey_dict["lastKnownClsSyncTime"][i]["updatedTime"] = \
                    updatedTime.isoformat()

        #Convert values of storagedetails key to float
        for j in range(len(portkey_dict["storageDetails"])):
            for i in ['total','available','used','used%']:
                storage_details = portkey_dict['storageDetails'][j][i]
                if "T" in storage_details:
                    sign = 'T'
                elif "%" in storage_details:
                    sign = '%'
                elif "G" in storage_details:
                    sign = 'G'
                else:
                    sign = storage_details[-1]

                portkey_dict['storageDetails'][j][i] = \
                        float(storage_details.replace(sign,""))

            #Renaming dictionary keys
            portkey_dict["storageDetails"][j]["total (TB)"] = \
                    portkey_dict["storageDetails"][j].pop("total")
            portkey_dict["storageDetails"][j]["used (TB)"] = \
                    portkey_dict["storageDetails"][j].pop("used")
            portkey_dict["storageDetails"][j]["available (TB)"] = \
                    portkey_dict["storageDetails"][j].pop("available")
            portkey_dict["storageDetails"][j]["used (%)"] = \
                    portkey_dict["storageDetails"][j].pop("used%")
            portkey_dict["storageDetails"][j]["path"] = \
                    portkey_dict["storageDetails"][j].pop("mountedOn")

        sys_uptime = portkey_dict["systemUpTime"]
        sys_uptime = re.findall(r'\d+', sys_uptime)
        portkey_dict["systemUpTime"]= \
                "00:00:00T{0}:{1}:00".format(sys_uptime[0], sys_uptime[1])
        generated_on = portkey_dict['generatedOn'][:-4]
        pattern = '%d %b %y %H:%M'
        portkey_dict['generatedOn'] = \
                datetime.strptime(generated_on, pattern).isoformat()
        transformed_portkey_dict.update(portkey_dict)

        return transformed_portkey_dict

    def to_json(sbox, message):
        '''Create JSON object.'''

        return json.dumps(message)

    def from_json(sbox, message):
        '''Dump json object.'''

        return json.loads(message)

if __name__ == '__main__':
    # Mostly useful for testing.
    with open('/tmp/portkey_data', 'r') as msg:
        data_proc = DataProcessing(msg.read())
        print(data_proc)
